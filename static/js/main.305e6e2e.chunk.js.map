{"version":3,"sources":["Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Container/styled.js","Container/index.js","Header/index.js","Date/styled.js","Date/index.js","themes.js","App.js","reportWebVitals.js","index.js"],"names":["StyledForm","styled","form","theme","colors","backgroundColor","StyledInput","input","breakpoints","smallerMobile","StyledNewTaskButton","button","newTaskButtonColor","newTaskButtonHoverColor","Form","addNewTask","useState","content","setNewTaskContent","inputRef","useRef","contentTrimmed","trim","onSubmit","event","preventDefault","name","placeholder","autoFocus","required","value","onChange","target","ref","onClick","current","focus","StyledTasksLisItem","li","hidden","css","StyledTasksList","ul","StyledTaskButton","left","right","StyledTask","span","completed","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","done","id","StyledButtonContainer","div","mobile","StyledButtons","mainColor","hoverColor","disabledColor","Buttons","toggleHideDone","setAllDone","length","disabled","every","StyledSectionContainer","StyledHeader","h2","Section","header","buttonsContainer","formContainer","tasksContainer","timer","StyledContainer","main","Container","children","Header","title","StyledDateContainer","StyledDate","p","dateColor","Timer","Date","time","setTime","useEffect","intervalId","setInterval","clearInterval","toLocaleString","redTheme","App","setHideDone","JSON","parse","localStorage","getItem","setTasks","setItem","stringify","task","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.305e6e2e.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const StyledForm = styled.form`\r\n    background-color: ${({ theme }) => theme.colors.backgroundColor};\r\n    display: flex;\r\n    padding: 20px;\r\n    margin-bottom: 10px;\r\n\r\n    @media (max-width:580px) {\r\n        display: flex;\r\n        flex-direction: column;\r\n        padding: 10px;\r\n    }\r\n`;\r\n\r\nexport const StyledInput = styled.input`\r\n    margin-right: 20px;\r\n    padding: 10px;\r\n    flex-grow: 1;\r\n    border: 1px solid #dddd;\r\n\r\n    @media (max-width:${({ theme }) => theme.breakpoints.smallerMobile}px){\r\n        margin: 10px;\r\n    }\r\n`;\r\n\r\nexport const StyledNewTaskButton = styled.button`\r\n    padding: 10px 30px 10px 30px;\r\n    color: white;\r\n    background-color: ${({ theme }) => theme.colors.newTaskButtonColor};\r\n    border: none;\r\n    transition: 0.5s;\r\n    \r\n    &:hover{\r\n        background-color: ${({ theme }) => theme.colors.newTaskButtonHoverColor};\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    @media (max-width:580px){\r\n        margin: 10px;\r\n\r\n        &:hover{\r\n            transform: scale(1.05);\r\n        }\r\n    }\r\n`;\r\n\r\n\r\n","import { useState, useRef } from \"react\";\r\nimport { StyledForm, StyledInput, StyledNewTaskButton } from \"./styled\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [content, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const contentTrimmed = content.trim()\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (!contentTrimmed) {\r\n            return;\r\n        }\r\n        addNewTask(contentTrimmed);\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    return (\r\n        <StyledForm onSubmit={onFormSubmit}>\r\n            <StyledInput\r\n                name=\"section__newTaskButton\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                autoFocus\r\n                required\r\n                value={content}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n                ref={inputRef}\r\n            />\r\n            <StyledNewTaskButton onClick={focusInput}>Dodaj zadanie</StyledNewTaskButton>\r\n        </StyledForm>\r\n    );\r\n}\r\n\r\n\r\nexport default Form;","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledTasksLisItem = styled.li`\r\n    display: flex;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #dddddd;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const StyledTasksList = styled.ul`\r\n    list-style: none;\r\n    background-color: white;\r\n    margin: 0px;\r\n    padding: 0;\r\n`;\r\n\r\nexport const StyledTaskButton = styled.button`\r\n    height: 30px;\r\n    align-self: center;\r\n    width: 30px;\r\n    border: none;\r\n    padding: 0px;\r\n    color: white;\r\n    transition: 1s;\r\n    flex-shrink: 0;\r\n\r\n    ${({ left }) => left && css`\r\n        background-color: hsl(120, 100%, 25%);\r\n\r\n        &:hover{\r\n            background-color: hsl(120, 100%, 35%);\r\n        }\r\n    `}\r\n\r\n    ${({ right }) => right && css`\r\n        background-color: hsl(0, 100%, 50%);\r\n\r\n        &:hover{\r\n            background-color: hsl(0, 100%, 60%);\r\n        }\r\n    `}\r\n`;\r\n\r\nexport const StyledTask = styled.span`\r\n    flex-grow: 1;\r\n    align-self: center;\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n    padding: 20px;\r\n\r\n    ${({ completed }) => completed && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;","import { StyledTasksLisItem, StyledTasksList, StyledTaskButton, StyledTask } from \"./styled\"\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <div>\r\n        <StyledTasksList>\r\n            {tasks.map(({ done, content, id }) => (\r\n                <StyledTasksLisItem\r\n                    key={id}\r\n                    hidden={done && hideDone}\r\n                >\r\n                    <StyledTaskButton\r\n                        left\r\n                        onClick={() => toggleTaskDone(id)}\r\n                    >\r\n                        {done ? \"✔\" : \"\"}\r\n                    </StyledTaskButton>\r\n                    <StyledTask\r\n                        completed={done}\r\n                    >\r\n                        {content}\r\n                    </StyledTask>\r\n                    <StyledTaskButton\r\n                        right\r\n                        onClick={() => removeTask(id)}\r\n                    >\r\n                        🗑\r\n                    </StyledTaskButton>\r\n                </StyledTasksLisItem>\r\n            ))\r\n            }\r\n        </StyledTasksList >\r\n    </div >\r\n);\r\n\r\nexport default Tasks;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const StyledButtonContainer = styled.div`\r\n    background-color: white;\r\n    padding: 20px;\r\n    border-bottom: 1px solid #dddddd;\r\n\r\n    @media (max-width:${({ theme }) => theme.breakpoints.mobile}px) {\r\n        width: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n    }\r\n    `;\r\n\r\nexport const StyledButtons = styled.button`\r\n    font-size: 20px;\r\n    border: none;\r\n    background: none;\r\n    color: ${({ theme }) => theme.colors.mainColor};\r\n    transition: 0.5s;\r\n\r\n    ${({ left }) => left && css`\r\n    padding-right: 30px;\r\n\r\n    @media (max-width: ${({ theme }) => theme.breakpoints.mobile}px) {\r\n        padding: 0px;\r\n        margin-bottom: 30px;\r\n    }\r\n    `}\r\n\r\n    &:hover {\r\n        color: ${({ theme }) => theme.colors.hoverColor};\r\n    }\r\n\r\n    &:disabled {\r\n    color: ${({ theme }) => theme.colors.disabledColor};\r\n    font-size: 20px;\r\n    border: none;\r\n    background: none;\r\n    }\r\n`;\r\n","import { StyledButtonContainer, StyledButtons } from \"./styled.js\"\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    tasks.length > 0 && (\r\n        <StyledButtonContainer >\r\n            <StyledButtons left onClick=\r\n                {toggleHideDone}\r\n            >\r\n                {hideDone === true ? \"Pokaż ukończone\" : \"Ukryj ukończone\"}\r\n            </StyledButtons>\r\n            <StyledButtons\r\n                disabled={tasks.every(({ done }) => done)}\r\n                onClick={() => setAllDone()}\r\n            >\r\n                Ukończ wszystkie\r\n            </StyledButtons>\r\n        </StyledButtonContainer>\r\n    )\r\n);\r\n\r\nexport default Buttons;","import styled from \"styled-components\";\r\n\r\nexport const StyledSectionContainer = styled.div`\r\n    display: flex;\r\n    background-color: white;\r\n    background-color: white;\r\n    border-bottom: 1px solid #dddddd;\r\n\r\n    @media (max-width:675px) {\r\n        flex-direction: column;\r\n        flex-grow: 1;\r\n    }\r\n`;\r\n\r\nexport const StyledHeader = styled.h2`\r\n    flex-grow: 1;\r\n    font-size: 30px;\r\n    padding: 20px;\r\n    margin: 0px;\r\n`;","import { StyledSectionContainer, StyledHeader } from \"./styled\";\r\n\r\nconst Section = ({ header, buttonsContainer, formContainer, tasksContainer, timer }) => (\r\n    <section>\r\n        <StyledSectionContainer>\r\n            <StyledHeader>{header}</StyledHeader>\r\n            {timer}\r\n            {buttonsContainer}\r\n        </StyledSectionContainer>\r\n        {formContainer}\r\n        {tasksContainer}\r\n    </section>\r\n);\r\n\r\nexport default Section;","import styled from \"styled-components\";\r\n\r\nexport const StyledContainer = styled.main`\r\n    max-width: 1000px;\r\n    margin: auto;\r\n    padding: 10px;\r\n`;","import { StyledContainer } from \"./styled.js\"\r\n\r\nconst Container = ({ children }) => (\r\n    <StyledContainer>\r\n        {children}\r\n    </StyledContainer>\r\n);\r\n\r\nexport default Container;","const Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nexport const StyledDateContainer = styled.div`\r\n    padding-right: 20px;\r\n    font-size: 20px;\r\n\r\n    @media (max-width:675px) {\r\n       align-self: center;\r\n    }\r\n`;\r\n\r\nexport const StyledDate = styled.p`\r\n    color: ${({ theme }) => theme.colors.dateColor};\r\n`;\r\n","import { useState, useEffect } from \"react\";\r\nimport { StyledDateContainer, StyledDate } from \"./styled\"\r\n\r\nconst Timer = () => {\r\n\r\n    const [time, setTime] = useState(new Date());\r\n\r\n    useEffect(() => {\r\n        const intervalId = setInterval(() => {\r\n            setTime(new Date());\r\n        }, 1000);\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <StyledDateContainer>\r\n            <StyledDate>{time.toLocaleString()}</StyledDate>\r\n        </StyledDateContainer>\r\n    )\r\n};\r\n\r\nexport default Timer;","const blueTheme = {\r\n    colors: {\r\n        mainColor: \"hsl(180, 100%, 35%)\",\r\n        hoverColor: \"hsl(180, 100%, 45%)\",\r\n        disabledColor: \"hsl(0,0%,90%)\",\r\n        dateColor: \"hsl(180, 100%, 25%)\",\r\n        backgroundColor: \"white\",\r\n        newTaskButtonColor: \"hsl(180, 100%, 35%)\",\r\n        newTaskButtonHoverColor: \"hsl(180, 100%, 45%)\",\r\n    },\r\n    breakpoints: {\r\n        mobile: 675,\r\n        smallerMobile: 580,\r\n    },\r\n};\r\n\r\nconst redTheme = {\r\n    colors: {\r\n        mainColor: \"hsl(0, 100%, 60%)\",\r\n        hoverColor: \"hsl(0, 100%, 30%)\",\r\n        disabledColor: \"hsl(0,0%,90%)\",\r\n        dateColor: \"hsl(0, 100%, 60%)\",\r\n        backgroundColor: \"white\",\r\n        newTaskButtonColor: \"hsl(0, 100%, 60%)\",\r\n        newTaskButtonHoverColor: \"hsl(0, 100%, 30%)\",\r\n    },\r\n    breakpoints: {\r\n        mobile: 675,\r\n        smallerMobile: 580,\r\n    },\r\n};\r\n\r\nexport { blueTheme, redTheme };\r\n","import Form from \"./Form\";\r\nimport Tasks from \"./Tasks\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"./Section\";\r\nimport Container from \"./Container\";\r\nimport Header from \"./Header\";\r\nimport Timer from \"./Date\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { ThemeProvider } from \"styled-components\"\r\nimport { blueTheme, redTheme } from \"./themes\";\r\n\r\nfunction App() {\r\n  const [hideDone, setHideDone] = useState(false);\r\n  const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem(\"tasks\")) || []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  }, [tasks]);\r\n\r\n  const toggleHideDone = () => {\r\n    setHideDone(hideDone => !hideDone);\r\n  };\r\n\r\n  const removeTask = (id) => {\r\n    setTasks(tasks => tasks.filter(task => task.id !== id));\r\n  };\r\n\r\n  const toggleTaskDone = (id) => {\r\n    setTasks(tasks => tasks.map(task => {\r\n      if (task.id === id) {\r\n        return { ...task, done: !task.done }\r\n      }\r\n      return task;\r\n    }\r\n    ));\r\n  };\r\n\r\n  const setAllDone = () => {\r\n    setTasks(tasks => tasks.map(task => (\r\n      {\r\n        ...task,\r\n        done: true,\r\n      }\r\n    )));\r\n  };\r\n\r\n  const addNewTask = (content) => {\r\n    setTasks(tasks => [\r\n      ...tasks,\r\n      {\r\n        content,\r\n        done: false,\r\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n      }\r\n    ])\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={redTheme}>\r\n      <Container>\r\n        <Header\r\n          title=\"Lista zadań\"\r\n        />\r\n        <Section\r\n          timer={\r\n            <Timer />\r\n          }\r\n          header=\"Dodaj nowe zadanie\"\r\n          formContainer={\r\n            <Form\r\n              addNewTask={addNewTask}\r\n              tasks={tasks}\r\n              setTasks={setTasks}\r\n            />\r\n          }\r\n        />\r\n        <Section\r\n          header=\"Lista zadań\"\r\n          buttonsContainer={\r\n            <Buttons\r\n              tasks={tasks}\r\n              hideDone={hideDone}\r\n              toggleHideDone={toggleHideDone}\r\n              setAllDone={setAllDone}\r\n            />}\r\n          tasksContainer={\r\n            <Tasks\r\n              tasks={tasks}\r\n              hideDone={hideDone}\r\n              removeTask={removeTask}\r\n              toggleTaskDone={toggleTaskDone}\r\n            />\r\n          }\r\n        />\r\n      </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}