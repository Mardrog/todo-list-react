{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Container/index.js","Header/index.js","Timer/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","content","setNewTaskContent","contentTrimmed","trim","className","onSubmit","event","preventDefault","name","placeholder","autoFocus","required","value","onChange","target","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","done","id","onClick","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","header","buttonsContainer","formContainer","tasksContainer","timer","Container","children","Header","title","Timer","date","Date","toLocaleString","time","setTime","setInterval","App","setHideDone","JSON","parse","localStorage","getItem","setTasks","setItem","stringify","task","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d7f2f39.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [content, setNewTaskContent] = useState(\"\");\r\n\r\n    const contentTrimmed = content.trim()\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        if (!contentTrimmed) {\r\n            return;\r\n        }\r\n        addNewTask(contentTrimmed);\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    return (\r\n        <form className=\"section__form\" onSubmit={onFormSubmit}>\r\n            <input\r\n                name=\"section__newTaskButton\"\r\n                className=\"section__input\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                autoFocus\r\n                required\r\n                value={content}\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <button className=\"section__newTaskButton\">Dodaj zadanie</button>\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\nexport default Form;","import \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <div className=\"section__tasksContainer\">\r\n        <ul className=\"section__tasksList\">\r\n            {tasks.map(({ done, content, id }) => (\r\n                <li\r\n                    key={id}\r\n                    className={`section__tasksListItem ${done && hideDone ? \"section__tasksListItem--hidden\" : \"\"}`}\r\n                >\r\n                    <button\r\n                        className={`section__taskButton section__taskButton--checked`}\r\n                        onClick={() => toggleTaskDone(id)}\r\n                    >\r\n                        {done ? \"âœ”\" : \"\"}\r\n                    </button>\r\n                    <span className={`section__task ${done ? \"section__task--completed\" : \"\"}`}>\r\n                        {content}\r\n                    </span>\r\n                    <button\r\n                        className={`section__taskButton section__taskButton--deleted`}\r\n                        onClick={() => removeTask(id)}\r\n                    >\r\n                        ðŸ—‘\r\n                    </button>\r\n                </li>\r\n            ))\r\n            }\r\n        </ul >\r\n    </div >\r\n);\r\n\r\nexport default Tasks;\r\n","\r\nimport \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    tasks.length > 0 && (\r\n        <div className=\"section__buttonsContainer\">\r\n            <button onClick={toggleHideDone}\r\n                className=\"section__buttons section__buttons--leftButton\">\r\n                {hideDone === true ? \"PokaÅ¼ ukoÅ„czone\" : \"Ukryj ukoÅ„czone\"}\r\n            </button>\r\n            <button\r\n                className=\"section__buttons section__buttons--rightButton\"\r\n                disabled={tasks.every(({ done }) => done)}\r\n                onClick={() => setAllDone()}\r\n            >\r\n                UkoÅ„cz wszystkie\r\n            </button>\r\n        </div>\r\n    )\r\n);\r\n\r\nexport default Buttons;","import \"./style.css\";\r\n\r\nconst Section = ({ header, buttonsContainer, formContainer, tasksContainer, timer }) => (\r\n    <section className=\"section\">\r\n        <div className=\"section__container\">\r\n            <h2 className=\"section__header\">{header}</h2>\r\n            {timer}\r\n            {buttonsContainer}\r\n        </div>\r\n        {formContainer}\r\n        {tasksContainer}\r\n    </section>\r\n);\r\n\r\nexport default Section;","import \"./style.css\"\r\n\r\nconst Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","const Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;\r\n","import { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Timer = () => {\r\n\r\n    const date = new Date();\r\n    const [time, setTime] = useState(date.toLocaleString());\r\n\r\n    setInterval((time) => {\r\n        time = new Date();\r\n        setTime(time.toLocaleString());\r\n    }, 1000)\r\n\r\n    return (\r\n        <div className=\"timer\">\r\n            <p className=\"timer__paragraph\">{time}</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Timer;","import Form from \"./Form\";\r\nimport Tasks from \"./Tasks\";\r\nimport Buttons from \"./Buttons\";\r\nimport Section from \"./Section\";\r\nimport Container from \"./Container\";\r\nimport Header from \"./Header\";\r\nimport Timer from \"./Timer\";\r\nimport { useState } from \"react\";\r\n\r\nfunction App() {\r\n  const [hideDone, setHideDone] = useState(false);\r\n  const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem(\"tasks\")) || []);\r\n\r\n  const saveDataInLocalStorage = () => {\r\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\r\n  };\r\n  saveDataInLocalStorage();\r\n\r\n  const toggleHideDone = () => {\r\n    setHideDone(hideDone => !hideDone);\r\n  };\r\n\r\n  const removeTask = (id) => {\r\n    setTasks(tasks => tasks.filter(task => task.id !== id));\r\n  };\r\n\r\n  const toggleTaskDone = (id) => {\r\n    setTasks(tasks => tasks.map(task => {\r\n      if (task.id === id) {\r\n        return { ...task, done: !task.done }\r\n      }\r\n      return task;\r\n    }\r\n    ));\r\n  };\r\n\r\n  const setAllDone = () => {\r\n    setTasks(tasks => tasks.map(task => (\r\n      {\r\n        ...task,\r\n        done: true,\r\n      }\r\n    )));\r\n  };\r\n\r\n  const addNewTask = (content) => {\r\n    setTasks(tasks => [\r\n      ...tasks,\r\n      {\r\n        content,\r\n        done: false,\r\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\r\n      }\r\n    ])\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Header\r\n        title=\"Lista zadaÅ„\"\r\n      />\r\n      <Section\r\n        timer={\r\n          <Timer />\r\n        }\r\n        header=\"Dodaj nowe zadanie\"\r\n        formContainer={\r\n          <Form\r\n            addNewTask={addNewTask}\r\n            tasks={tasks}\r\n            setTasks={setTasks}\r\n          />\r\n        }\r\n      />\r\n      <Section\r\n        header=\"Lista zadaÅ„\"\r\n        buttonsContainer={\r\n          <Buttons\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            toggleHideDone={toggleHideDone}\r\n            setAllDone={setAllDone}\r\n          />}\r\n        tasksContainer={\r\n          <Tasks\r\n            tasks={tasks}\r\n            hideDone={hideDone}\r\n            removeTask={removeTask}\r\n            toggleTaskDone={toggleTaskDone}\r\n          />\r\n        }\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}